AWSTemplateFormatVersion: '2010-09-09'
Description: ECS Cluster and Loadbalancer Setup
Parameters:
  ServiceName:
    Type: String
    Description: Provide a Tag name to identify the ECS.
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the ECS instances.
  AsgDesiredCapacity:
    Type: Number
    Description: Number of instances to launch in your ECS cluster.
  AsgMaxSize:
    Type: Number
    Description: Maximum number of instances that can be launched in your ECS cluster.
  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: [t2.nano, t2.micro, t2.small, t2.medium, t2.large, t2.xlarge, t2.2xlarge, m4.large, m4.xlarge, m4.2xlarge, m4.4xlarge, m4.10xlarge, m4.16xlarge, m3.medium, m3.large, m3.xlarge, m3.2xlarge, c4.large, c4.xlarge, c4.2xlarge, c4.4xlarge, c4.8xlarge, c3.large, c3.xlarge, c3.2xlarge, c3.4xlarge, c3.8xlarge, r3.large, r3.xlarge, r3.2xlarge, r3.4xlarge, r3.8xlarge, r4.large, r4.xlarge, r4.2xlarge, r4.4xlarge, r4.8xlarge, r4.16xlarge, x1.16xlarge, x1.32xlarge]
    ConstraintDescription: Please choose a valid instance type.
  PrivateSubnetAZ1:
    Description: Private subnet in availability Zone 1
    Type: String
  PrivateSubnetAZ2:
    Description: Private subnet in availability Zone 2
    Type: String
  ECSSecurityGroup:
    Description: SecurityGroup for ECS.
    Type: String
  PublicSubnetAZ1:
    Description: Public Subnet ID in Availability Zone 1.
    Type: String
  PublicSubnetAZ2:
    Description: Public Subnet ID in Availability Zone 2.
    Type: String
  VpcId:
    Type: String
    Description: Provide the VPC ID.
  LoadbalancerSecurityGroup:
    Type: String
    Description: Loadbalancer Security Group

Mappings: ## Add other ecs optimized AMI ID's if running other than the 4 regions.
  AWSRegionToAMI:
    ap-northeast-1:
        AMIID: ami-09d2d0c649a13ad5a
    us-east-1:
        AMIID: ami-0d2b1cde5e6d7020f
    us-east-2:
        AMIID: ami-0e020d2dbdac03d59
    ap-south-1:
        AMIID: ami-0ce933e2ae91880d3
    us-west-2:
        AMIID: ami-0c13873ede4682a27
Resources:
  ECRRepository:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Sub ${ServiceName}-repo-spring3-javapp

  ECSCluster:
    Type: AWS::ECS::Cluster
    Properties:
     ClusterName: !Sub ${ServiceName}-cluster-spring3hibernate

  ECSAutoscalingLC:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      AssociatePublicIpAddress: false
      ImageId: !FindInMap [AWSRegionToAMI, !Ref 'AWS::Region', AMIID]
      SecurityGroups:
        - !Ref ECSSecurityGroup
      InstanceType: !Ref 'InstanceType'
      IamInstanceProfile: !Ref 'EC2InstanceProfile'
      KeyName: !Ref 'KeyName'
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash -xe
              echo ECS_CLUSTER=${ServiceName}-cluster-spring3hibernate >> /etc/ecs/ecs.config
              sudo yum update -y
              sudo yum install wget -y
            - { Region: !Ref 'AWS::Region' }

  ECSAutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - !Ref PrivateSubnetAZ1
        - !Ref PrivateSubnetAZ2
      LaunchConfigurationName: !Ref 'ECSAutoscalingLC'
      MinSize: '1'
      MaxSize: !Ref 'AsgMaxSize'
      Tags:
        -
          Key: Name
          Value: !Sub ${ServiceName}-ECShost
          PropagateAtLaunch: true
        -
          Key: Service
          Value: !Sub ${ServiceName}
          PropagateAtLaunch: true

  ECSASGScheduledAction:
    Type: AWS::AutoScaling::ScheduledAction
    DependsOn: ECSAutoScalingGroup
    Properties:
      AutoScalingGroupName: !Ref ECSAutoScalingGroup
      DesiredCapacity: !Ref AsgDesiredCapacity
      Recurrence:  30 1 * * *

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ${ServiceName}-ecs-spring3hibernate
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [ec2.amazonaws.com]
          Action: ['sts:AssumeRole']
      Path: /

  ECSServicePolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "root"
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ecs:CreateCluster
              - ecs:DeregisterContainerInstance
              - ecs:DiscoverPollEndpoint
              - ecs:Poll
              - ecs:RegisterContainerInstance
              - ecs:StartTelemetrySession
              - ecs:Submit*
              - ecr:GetAuthorizationToken
              - ecr:BatchCheckLayerAvailability
              - ecr:GetDownloadUrlForLayer
              - ecr:BatchGetImage
              - logs:CreateLogStream
              - logs:PutLogEvents
              - s3:*
              - rds:*
            Resource: '*'
      Roles: [!Ref 'EC2Role']

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: [!Ref 'EC2Role']

# --- EC2 AutoScaling Policies
  ECSScaleUpPolicyCPU:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'

  ECSCPUScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if ECS Cluster CPU Utilization goes above 80
      Period: '300'
      AlarmActions: [!Ref 'ECSScaleUpPolicyCPU']
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Sub ${ServiceName}-cluster-spring3hibernate
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUReservation

  ECSScaleUpPolicyMemory:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'

  ECSMemoryScaleUpAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '80'
      AlarmDescription: Alarm if ECS Cluster Memory reservation goes above 80
      Period: '300'
      AlarmActions: [!Ref 'ECSScaleUpPolicyMemory']
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Sub ${ServiceName}-cluster-spring3hibernate
      ComparisonOperator: GreaterThanThreshold
      MetricName: MemoryReservation

  ECSScaleDownPolicyMemory:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        Ref: ECSAutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '-1'

  ECSMemoryScaleDownAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if ECS Cluster Memory reservation goes below 10
      Period: '600'
      AlarmActions: [!Ref 'ECSScaleDownPolicyMemory']
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Sub ${ServiceName}-cluster-spring3hibernate
      ComparisonOperator: LessThanThreshold
      MetricName: MemoryReservation

  CloudwatchLogSpring3JavaApp:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub ECSspring3hibernate-${ServiceName}
      RetentionInDays: 30

# LoadBalancer Setup

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Name: !Sub ${ServiceName}-spring3hibernate-alb
      Scheme: internet-facing
      Subnets:
        - Ref:  PublicSubnetAZ1
        - Ref:  PublicSubnetAZ2
      SecurityGroups:
        - !Ref LoadbalancerSecurityGroup
      Tags:
      - Key: Name
        Value: !Sub '${ServiceName}-ALB'
      - Key: Service
        Value: !Sub '${ServiceName}'

  ALBListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    DependsOn: ALB
    Properties:
      DefaultActions:
      - Type: forward
        TargetGroupArn:
          Ref: Spring3hibernateTG
      LoadBalancerArn:
        Ref: ALB
      Port: '80'
      Protocol: HTTP

  ALBListenerRule1:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    DependsOn: ALBListener
    Properties:
      Actions:
      - Type: forward
        TargetGroupArn:
          Ref: Spring3hibernateTG
      Conditions:
      - Field: path-pattern
        Values: [/]
      ListenerArn:
        Ref: ALBListener
      Priority: 1

  Spring3hibernateTG:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    DependsOn: ALB
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckPort: traffic-port # The port that the load balancer uses when performing health checks on the targets
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 5
      Name:  !Sub '${ServiceName}-spring3hibernateTG'
      Port: 8080 # The port on which the targets receive traffic
      Protocol: HTTP
      UnhealthyThresholdCount: 2
      VpcId:
        Ref: VpcId
      Tags:
      - Key: Name
        Value: !Sub '${ServiceName}-spring3hibernateTG'
      - Key: Service
        Value: !Sub '${ServiceName}'

Outputs:
  ECSClusterName:
    Description: ECS Cluster Name
    Value: !Sub ${ServiceName}-cluster-spring3hibernate
    Export:
      Name: !Sub ${ServiceName}-ECSClusterName
  ECSAutoScalingGroup:
    Description: Name of the AutoScaling group.
    Value: !Ref ECSAutoScalingGroup
    Export:
      Name: !Sub ${ServiceName}-ECSAutoScalingGroup
  LoadBalancerDNSName:
    Description: LoadBalancer DNS Name
    Value: !GetAtt ALB.DNSName
    Export:
      Name: LoadBalancerDNSName
  LoadBalancerFullName:
    Description: LoadBalancer FullName
    Value: !GetAtt ALB.LoadBalancerFullName
    Export:
      Name: !Sub ${ServiceName}-LoadBalancerFullName-spring3hibernate
  Spring3hibernateTG:
    Description: Name of the 1 Target Group.
    Value: !Ref Spring3hibernateTG
    Export:
      Name: !Sub ${ServiceName}-Spring3hibernateTG